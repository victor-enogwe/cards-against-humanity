# Generated by Django 2.2.9 on 2020-01-24 07:46

import json, os, re
from os import listdir, path
from os.path import isfile, join
from django.db import migrations
from django.contrib.auth.models import User 
from config.settings import env

BASE_DIR = path.dirname(path.dirname(path.dirname(path.abspath(__file__))))

bulk_create_args = { 'batch_size': 100, 'ignore_conflicts': True }

def load_data(filepath):
    data = open(filepath, encoding='utf-8')
    items = json.load(data)
    data.close()
    return items

def create_admin(apps, schema_editor):
    try:
        return User.objects.create_superuser(
            username = env('ADMIN_USER'),
            email = env('ADMIN_EMAIL'),
            password = env('ADMIN_PASSWORD')
        )
    except:
        return print('admin user exists')

def delete_admin(apps, schema_editor):
    return User.objects.get(email=env('ADMIN_EMAIL')).delete()

def create_genres(filepath):
    def create (apps, schema_editor):
        Genre = apps.get_model('api', 'Genre')
        genres = [Genre.objects.get_or_create(**item) for item in load_data(filepath)]

        return [item for item, created in genres]
    return create

def find_genre(description, genres):
    try:
        return [item for item in genres if item.description == description][0]
    except:
        return None


def create_blackcards(filepath):
    def cards(apps, schema_editor):
        BlackCard = apps.get_model('api', 'BlackCard')
        genres = apps.get_model('api', 'Genre').objects.all()
        data = load_data(filepath)
        return [BlackCard.objects.get_or_create(**{ **item, 'genre': find_genre(item['genre'], genres) }) for item in data]
    return cards

def create_whitecards(filepath):
    def cards(apps, schema_editor):
        WhiteCard = apps.get_model('api', 'WhiteCard')
        genres = apps.get_model('api', 'Genre').objects.all()
        data = load_data(filepath)
        return [WhiteCard.objects.get_or_create(**{ **item, 'genre': find_genre(item['genre'], genres) }) for item in data]
    return cards

def filenames(dirpath):
    return [path.join(dirpath, f) for f in listdir(dirpath) if isfile(join(dirpath, f)) and re.match('^[A-Za-z]', f)]

class Migration(migrations.Migration):
    genres = filenames(path.join(BASE_DIR, 'data/genres'))
    blackcards = filenames(path.join(BASE_DIR, 'data/blackcards'))
    whitecards = filenames(path.join(BASE_DIR, 'data/whitecards'))

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = (
        [migrations.RunPython(create_admin, delete_admin)] +
        [migrations.RunPython(create_genres(path)) for path in genres] +
        [migrations.RunPython(create_blackcards(path)) for path in blackcards] +
        [migrations.RunPython(create_whitecards(path)) for path in whitecards]
    )
